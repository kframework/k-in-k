# For use with python generators
# ------------------------------

rule python3-generator
    description = Configuring $in
    command     = python3 $in > $out
    generator   = true

# Literate programming
# --------------------

tangle_selector = .k
rule tangle
    description = Tangling $in
    command     = LUA_PATH=$tangle_repository/?.lua    $
                  pandoc $in -o $out --metadata=code:$tangle_selector --to "$tangle_repository/tangle.lua"

# Initializing submodules
# -----------------------

rule git-submodule-init
    description     = Initializing $out
    command         = git submodule update --init $$(dirname $out)

# Building K
# ----------

rule build-k
    description     = Building K
    command         = cd $k_repository && mvn package -q -DskipTests

rule opam-build-ocamlc-k
    description     = Building ocamlc+k
    command         = $
      opam init --quiet --no-setup --yes                                                      && $
      ( opam repository add k "$k_repository/k-distribution/target/release/k/lib/opam"        || $
        opam repository set-url k "$k_repository/k-distribution/target/release/k/lib/opam" )  && $
      opam update                                                                             && $
      (opam switch remove 4.03.0+k || true)                                                   && $
      opam switch -v 4.03.0+k                                                                 && $
      touch -c $out
    pool            = opam

rule opam-install
    description     = opam install $out
    command         = opam install --yes $package && touch -c $out
    pool            = opam

pool opam
    depth = 1

# Basic K Toolchain
# -----------------

rule kompile
    description     = Kompiling $in ($backend)
    command         = $k_bindir/kompile --backend $backend --debug $
                                        --directory $$(dirname $$(dirname $out)) $in
rule krun
    description     = Running $in ($directory)
    command         = $k_bindir/krun $flags --debug --directory $directory $in > $out

rule kprove
    description     = Checking specification $in
    command         = $k_bindir/kprove $flags --directory $directory $in

# Testing
# -------

rule check-test-result
    description = Checking $in
    command = git diff --no-index $in $expected

# Advanced OCaml Backend Usage
# ----------------------------
#
# For compiling K plugins for the OCaml backend, we need a two-stage kompilation process. In the
# first step, we generate the Constants.ml and other ml files, and use those to in the compilation
# of the plugin implementation.
#
rule kompile-gen-ml
    description     = kompiling $in: Generating OCaml files
    command         = $k_bindir/kompile $flags --backend ocaml --debug --directory $directory $in $
                           --gen-ml-only && touch -c $out

rule kompile-interpreter
    description     = $k_bindir/kompile $in: Compiling
    command         = bin/interpreter-from-ml $$(dirname $out) $mlplugins

rule ocamllex
    description     = ocamllex $in
    command         = ocamllex $flags $in

rule ocamlyacc
    description     = ocamlyacc $in
    command         = ocamlyacc $flags $in

rule ocamlopt
    description     = ocamlopt $out
    command         = ocamlfind opt -o $out $flags $in

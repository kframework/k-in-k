[  ]

module A-BASIC-K
  sort K {  } [  ]
  sort KItem {  } [  ]
endmodule [  ]

module B-KSEQ
  axiom { R } \equals { K {  } , R } ( append {  } ( dotk {  } (  ) , K2 : K {  } ) , K2 : K {  } ) [  ]
  axiom { R } \equals { K {  } , R } ( append {  } ( kseq {  } ( K1 : KItem {  } , K2 : K {  } ) , K3 : K {  } ) , kseq {  } ( K1 : KItem {  } , append {  } ( K2 : K {  } , K3 : K {  } ) ) ) [  ]
  import A-BASIC-K [  ]
  symbol append {  } ( K {  } , K {  } ) : K {  } [ function {  } (  ) ]
  symbol dotk {  } (  ) : K {  } [ functional { } ( ), constructor { } ( ), injective { } ( )  ]
  symbol kseq {  } ( KItem {  } , K {  } ) : K {  } [ functional { } ( ), constructor { } ( ), injective { } ( )  ]
endmodule [  ]

module C-INJ
  axiom { S1 , S2 , S3 , R } \equals { S3 , R } ( inj { S2 , S3 } ( inj { S1 , S2 } ( T : S1 ) ) , inj { S1 , S3 } ( T : S1 ) ) [  ]
  symbol inj { From , To } ( From ) : To [  ]
endmodule [  ]

module D-K
  import B-KSEQ [  ]
  import C-INJ [  ]
endmodule [  ]

module PEANO
  axiom { R } \equals { Nat {  } , R } ( plus {  } ( succ {  } ( X : Nat {  } ) , Y : Nat {  } ) , succ {  } ( plus {  } ( X : Nat {  } , Y : Nat {  } ) ) ) [  ]
  axiom { R } \equals { Nat {  } , R } ( plus {  } ( zero {  } (  ) , Y : Nat {  } ) , Y : Nat {  } ) [  ]
  import D-K [  ]
  sort Nat {  } [  ]
  symbol plus {  } ( Nat {  } , Nat {  } ) : Nat {  } [ function {  } (  ) ]
  symbol succ {  } ( Nat {  } ) : Nat {  } [ functional {  } (  ) , constructor {  } (  ) ,  injective { } ( ) ]
  symbol zero {  } (  ) : Nat {  } [ functional {  } (  ) , constructor {  } (  ) ,  injective { } ( ) ]
  syntax Nat ::= "plus" "(" Nat "," Nat ")" [ klabel ( plus  ), function ]
  syntax Nat ::= "succ" "(" Nat ")" [ functional , constructor , injective , klabel ( succ  ) ]
  syntax Nat ::= "zero" [ functional , constructor , injective , klabel ( zero  ) ]
endmodule [  ]



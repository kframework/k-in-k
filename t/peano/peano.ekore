module A-BASIC-K
  sort K{} []
  sort KItem{} []
endmodule [ ]

module B-KSEQ
  import A-BASIC-K []
  symbol kseq{}(KItem{},K{}) : K{} []
  symbol append{}(K{}, K{}) : K{} [function{}()]
  symbol dotk{}() : K{} []
  axiom { R } \equals { K { }, R } ( append { } ( dotk { } ( ) , K2:K { } ) , K2 : K { } ) [ ]
  axiom { R } \equals { K { }, R } ( append { } ( kseq { } ( K1 : KItem { } , K2 : K { } ) , K3 : K { } ) , kseq { } ( K1 : KItem { } , append { } (K2 : K { } , K3 : K { } ) ) ) [ ]
endmodule [ ]

module C-INJ
  symbol inj{From,To}(From) : To []
  axiom{S1,S2,S3,R} \equals{S3,R}( inj{S2,S3}(inj{S1,S2}(T:S1)), inj{S1,S3}(T:S1)) []
endmodule [ ]

module D-K
  import B-KSEQ []
  import C-INJ []
endmodule [ ]

module PEANO
  import D-K []

  syntax Nat ::=
      "zero" [ klabel ( zero ), constructor, functional ]
    | "succ" "(" Nat ")" [ klabel ( succ ), constructor, functional ]
    | "plus" "(" Nat "," Nat ")" [ klabel ( plus ), function ]
  rule plus{}(zero{}(), Y:Nat{}) => Y:Nat{}
  rule plus{}(succ{}(X:Nat{}), Y:Nat{}) => succ{}(plus{}(X:Nat{}, Y:Nat{}))
endmodule

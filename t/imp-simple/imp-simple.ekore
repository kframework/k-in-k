module A-BASIC-K
  sort K{} []
  sort KItem{} []
endmodule [ ]

module B-KSEQ
  import A-BASIC-K []

  syntax K ::= KItem "~>" K [klabel(kseq)]
  syntax K ::= ".K" [klabel(dotk)]

  symbol append{}(K{}, K{}) : K{} [function{}()]

  axiom{ R }
    \equals{K{},R}(
      append{}(dotk{}(),K2:K{}),
      K2:K{})
  []

  axiom{R}
    \equals{K{},R}(
      append{}(kseq{}(K1:KItem{},K2:K{}),K3:K{}),
      kseq{}(K1:KItem{},append{}(K2:K{},K3:K{})))
  []
endmodule [ ]

module C-INJ
  symbol inj{From,To}(From) : To []

  axiom{S1,S2,S3,R}
    \equals{S3,R}(
      inj{S2,S3}(inj{S1,S2}(T:S1)),
      inj{S1,S3}(T:S1))
  []
endmodule

module D-K
  import B-KSEQ []
  import C-INJ []
endmodule

module IMP-SIMPLE
  import D-K []

  syntax BExp ::= "True"             [klabel(True)]
                | "False"            [klabel(False)]
                | BExp "&&" BExp     [klabel(And)]
  syntax KCell ::= "kCell" "(" K ")" [klabel(kCell)]

  rule kCell{}(kseq{}(inj{BExp{}, KItem{}}(And{}(True{}(),VarB:BExp{})),DOTVAR:K{}))
    => kCell{}(kseq{}(inj{BExp{}, KItem{}}(VarB:BExp{}),DOTVAR:K{}))
  rule kCell{}(kseq{}(inj{BExp{}, KItem{}}(And{}(False{}(),VarB:BExp{})),DOTVAR:K{}))
    => kCell{}(kseq{}(inj{BExp{}, KItem{}}(False{}()),DOTVAR:K{}))
endmodule

module IMP-SYNTAX
  imports DOMAINS-SYNTAX
  syntax AExp  ::= Int | Id
                 | "-" Int
                 | AExp "/" AExp              [left, strict]
                 > AExp "+" AExp              [left, strict]
                 | "(" AExp ")"               [bracket]
  syntax BExp  ::= Bool
                 | AExp "<=" AExp             [seqstrict, latex({#1}\leq{#2})]
                 | "!" BExp                   [strict]
                 > BExp "&&" BExp             [left, strict(1)]
                 | "(" BExp ")"               [bracket]
  syntax Block ::= "{" "}"
                 | "{" Stmt "}"
  syntax Stmt  ::= Block
                 | Id "=" AExp ";"            [strict(2)]
                 | "if" "(" BExp ")"
                   Block "else" Block         [strict(1)]
                 | "while" "(" BExp ")" Block
                 > Stmt Stmt                  [left]
  syntax Pgm ::= "int" Ids ";" Stmt
  syntax Ids ::= List{Id,","}
endmodule


module IMP
  imports IMP-SYNTAX
  imports DOMAINS
  syntax KResult ::= Int | Bool

  configuration #kast(#KCellDeclaration( #KCellAttributes(\dv{String}("color"), \dv{String}("yellow"))
                                       , tcell{}(#KBag(#KCellDeclaration( #KCellAttributes(\dv{String}("color"), \dv{String}("green"))
                                                                        , kcell{}(#KConfigurationInitVariable(\dv{String}("$PGM"), \dv{KSort{}("Pgm")))
                                                                        )
                                                      ,#KCellDeclaration( #KCellAttributes(\dv{String}("color"), \dv{String}("red"))
                                                                        , statecell{}(dotMap{}())
                     )                 )        )     )                 )

// AExp
  rule #Kast{} (#KBag{}(kcell{}( #KRewrite{}(X:Id{}, I:Int{})
                               , #KDots{}())
                       , statecell{}( #KDots{}()
                                    , mapItem{}(X:Id{}, I:Int{})
                                    , #KDots{}())
               )       )

  rule #Kast{}(#KRewrite{}( `_/_`{}(I1:Int{}, I2:Int{})
                          , `_/Int_`{}(I1:Int{}, I2:Int{})
              )           )
    requires #Kast{}(`_=/=Int_`{}(I2:Int{}, \dv{Int{}}("0")))

  rule #Kast{}(#KRewrite{}(`_+_`{}(I1:Int{}, I2:Int{})
                          , `_+Int_`{}(I1:Int{}, I2:Int{})
              )           )

  rule #Kast{}(#KRewrite{}( `-_`{}(I1:Int{})
                          , `_-Int_`{}(\dv{Int{}}("0"), I1:Int{})))

// BExp
  rule #Kast{}(#KRewrite{}( `_<=_`{}(I1:Int{}, I2:Int{})
                          , `_<=Int_`{}(I1:Int{}, I2:Int{})
              )           )
  rule #Kast{}(#KRewrite{}( `!_`(T:Bool{})
                          , `notBool_`{}(T:Bool{})
              )           )
  rule #Kast{}(#KRewrite{}( `_&&_`(\dv{Bool{}}("true"), B:Bool{})
                          , B:Bool{}
              )           )
  rule #Kast{}(#KRewrite{}( `_&&_`(\dv{Bool{}}("false"), VarUnds:Bool{})
                          , \dv{Bool{}}("false")
              )           )

// Block
  rule #Kast(#KRewrite{}(`{_}`{}(), dotK{}())) [structural]
  rule #Kast(#KRewrite{}(`{_}`{}(S:Stmt{}), S:Stmt{})) [structural]

// Stmt
  rule #Kast(#KBag{}( kcell{}( #KRewrite{}(`_=_;`{}(X:Id{}, I:Int{}), dotK{}())
                             , #KDots{}())
                    , statecell{}( #KDots{}()
                                 , mapBinding{}(X:Id{}, #KRewrite{}(VarUnds:Int{}, I:Int{}))
                                 , #KDots{}()
            )       )            )
  rule #Kast(#KRewrite{}( `__`{}(S1:Stmt{}, S2:Stmt{})
                        , kseq{}(S1:Stmt{}, S2:Stmt{})
            )           )
  rule #Kast(#KRewrite{}(`if(_)_else_`{}(\dv{Bool{}}("true"), S:Block{}, VarUnds:Block{})
                        , S:Block{}
            )           )
  rule #Kast(#KRewrite{}(`if(_)_else_`{}(\dv{Bool{}}("false"), VarUnds:Block{}, S:Block{})
                        , S:Block{}
            )           )
  rule #Kast(#KRewrite{}( `while(_)_`{}(B:Bool{}, S:Block{})
                        , `if(_)_else_`{}(B:Bool{}, `{_}`{}(`__`{}(S:Block{}, `while(_)_`{}(B:Bool{}, S:Block{}))
            )           ) [structural]

// Pgm
  rule #Kast(#KBag{}( kcell{}(`int_;_`{}(#KRewrite(`IdList{}`(X:Id{}, Xs:IdList{}), Xs:IdList{}), VarUnds:Block{}))
                    , statecell{}( mapConcat{}( Rho:Map{}
                                              , #KRewrite{}(dotMap{}(), mapBinding{}(X:Id{}, \dv{Int}("0")))
            )       )            )            )
    requires #Kast(`notBool_`{}(mapInKeys{}(X:Id{}, Rho:Map{})))

  rule #Kast(`int_;_`{}(#KRewrite(dotIdList{}(), Xs:IdList{}), S:Block{}))  [structural]
endmodule

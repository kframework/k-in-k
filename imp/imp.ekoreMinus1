module IMP-SYNTAX
  imports DOMAINS-SYNTAX
  syntax AExp  ::= Int | Id
                 | "-" Int
                 | AExp "/" AExp              [left, strict]
                 > AExp "+" AExp              [left, strict]
                 | "(" AExp ")"               [bracket]
  syntax BExp  ::= Bool
                 | AExp "<=" AExp             [seqstrict, latex({#1}\leq{#2})]
                 | "!" BExp                   [strict]
                 > BExp "&&" BExp             [left, strict(1)]
                 | "(" BExp ")"               [bracket]
  syntax Block ::= "{" "}"
                 | "{" Stmt "}"
  syntax Stmt  ::= Block
                 | Id "=" AExp ";"            [strict(2)]
                 | "if" "(" BExp ")"
                   Block "else" Block         [strict(1)]
                 | "while" "(" BExp ")" Block
                 > Stmt Stmt                  [left]
  syntax Pgm ::= "int" Ids ";" Stmt
  syntax Ids ::= List{Id,","}
endmodule


module IMP
  imports IMP-SYNTAX
  imports DOMAINS
  syntax KResult ::= Int | Bool

  configuration #parse(<T color="yellow">
                         <k color="green"> $PGM:Pgm </k>
                         <state color="red"> .Map </state>
                       </T>)

// AExp
  rule #parse("<k> X:Id => I ...</k> <state>... X |-> I ...</state>")
  rule #parse("I1 / I2 => I1 /Int I2")  requires I2 =/=Int 0
  rule #parse("I1 + I2 => I1 +Int I2")
  rule #parse("- I1 => 0 -Int I1")
// BExp
  rule #parse("I1 <= I2 => I1 <=Int I2")
  rule #parse("! T => notBool T")
  rule #parse("true && B => B")
  rule #parse("false && _ => false")
// Block
  rule #parse("{} => .")  [structural]
  rule #parse("{S} => S")  [structural]
// Stmt
  rule #parse("<k> X = I:Int; => . ...</k> <state>... X |-> (_ => I) ...</state>")
  rule #parse("S1:Stmt S2:Stmt => S1 ~> S2")  [structural]
  rule #parse("if (true)  S else _ => S")
  rule #parse("if (false) _ else S => S")
  rule #parse("while (B) S => if (B) {S while (B) S} else {}") [structural]
// Pgm
  rule #parse("<k> int (X,Xs => Xs);_ </k> <state> Rho:Map (.Map => X|->0) </state>")
    requires #parse("notBool (X in keys(Rho))")
  rule int .Ids; S => S  [structural]
endmodule
